#!/usr/bin/env bash
set -x -e

apt-get install -y cpio

export LINUX_SRC_DIR=${LINUX_SRC_DIR:-${WORKDIR}/linux}

# Make sure the source directory is cleaned up
rm -rf "${LINUX_SRC_DIR}"

# Checkout the linux source directory
git clone --single-branch --branch rpi-4.19.y --depth 1 https://www.github.com/raspberrypi/linux ${LINUX_SRC_DIR}
cd "${LINUX_SRC_DIR}"

# Use -j<nproc> as default if MAKEFLAGS is not set
if [[ -v "${MAKEFLAGS}" ]]; then
  export MAKEFLAGS="-j$(nproc)"
fi

# Checkout the rtl8812au driver
(
    cd drivers/net/wireless/realtek
    git clone -b v5.2.20 https://github.com/aircrack-ng/rtl8812au.git
    cd rtl8812au

    sed -i 's/CONFIG_PLATFORM_I386_PC = y/CONFIG_PLATFORM_I386_PC = n/' Makefile
    sed -i 's/CONFIG_PLATFORM_ARM_RPI = n/CONFIG_PLATFORM_ARM_RPI = y/' Makefile
    # per justins request commented out
    # sudo sed -i 's/CONFIG_USB2_EXTERNAL_POWER = n/CONFIG_USB2_EXTERNAL_POWER = y/' Makefile
    sed -i 's/export TopDIR ?= $(shell pwd)/export TopDIR2 ?= $(shell pwd)/' Makefile
    sed -i '/export TopDIR2 ?= $(shell pwd)/a export TopDIR := $(TopDIR2)/drivers/net/wireless/realtek/rtl8812au/' Makefile

    # Change the STBC value to make all antennas send with awus036ACH
    (
	cd core
	sed -i 's/u8 fixed_rate = MGN_1M, sgi = 0, bwidth = 0, ldpc = 0, stbc = 0;/u8 fixed_rate = MGN_1M, sgi = 0, bwidth = 0, ldpc = 0, stbc = 1;/' rtw_xmit.c
    )
)

# Checkout the v4l2loopback driver
(
    cd drivers/media
    git clone https://github.com/RespawnDespair/v4l2loopback.git
    # in Make file change CONFIG_PLATFORM_I386_PC = y -> n, CONFIG_PLATFORM_ARM_RPI = n -> y and TopDir
)

# Apply the patches
PATCH_DIRS="${PATCH_DIR:-${WORKDIR}/patches}"
patch_dir_array=( "${PATCH_DIRS}" )
for patch_dir in "${patch_dir_array[@]}"
do
  # Apply patches if `patch_dir` exists
  if [ -d "${patch_dir}" ]; then
    echo "Applying patches from ${patch_dir}"
    for patch in "${patch_dir}/"*.patch; do
      echo "Applying patch ${patch}"
      patch -p1 < "${patch}"
    done
  fi
done

# Configure kernel
ARCH=arm
PATH=${PATH}:/opt/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2709_defconfig

# Change some defaults
sed -i 's/^.*CONFIG_NET_FOU .*$/CONFIG_NET_FOU=m/' .config
sed -i 's/^.*CONFIG_CFG80211_CERTIFICATION_ONUS.*$/CONFIG_CFG80211_CERTIFICATION_ONUS=y/' .config
sed -i 's/^.*CONFIG_CFG80211_REQUIRE_SIGNED_REGDB.*$/#CONFIG_CFG80211_REQUIRE_SIGNED_REGDB is not set/' .config
sed -i 's/^.*CONFIG_CFG80211_USE_KERNEL_REGDB_KEYS.*$/#CONFIG_CFG80211_USE_KERNEL_REGDB_KEYS is not set/' .config

# Store and print kernelrease
make kernelrelease
KERNEL_VERSION=$(make kernelrelease | grep "^4.")
echo "Building kernel ${KERNEL_VERSION}"

# Build everything
yes "" | make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs
yes "" | make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg

# Copy to tmp destionation
export TMP_DEST=/tmp/build
INSTALL_MOD_PATH="${TMP_DEST}" make modules_install

mkdir -p "${TMP_DEST}/boot/overlays"
cp arch/arm/boot/zImage "${TMP_DEST}/boot/kernel-${KERNEL_VERSION}.img"
cp -R arch/arm/boot/dts/* "${TMP_DEST}"/boot/

# Copy config.txt to /boot if it exists
if [ -f config.txt ] ; then
  cp config.txt "${TMP_DEST}"/boot/
  # Add kernel version to config.txt
  echo -e "\nkernel=kernel-${KERNEL_VERSION}.img" >> "${TMP_DEST}"/boot/config.txt
fi

# Copy cmdline.txt to /boot if it exists
if [ -f cmdline.txt ] ; then
  cp cmdline.txt "${TMP_DEST}"/boot/
fi

# Compile and copy dt-blob.dts to /boot/dt-blob.bin if it exists
if [ -f dt-blob.dts ] ; then
  ./scripts/dtc/dtc -I dts -O dtb -o "${TMP_DEST}"/boot/dt-blob.bin dt-blob.dts
fi

# Create tar file of everything
mkdir -p "${BUILD_DEST}"
tar -cvzf "${BUILD_DEST}/kernel-${KERNEL_VERSION}.tar.gz" -C $TMP_DEST .
sha256sum "${BUILD_DEST}/kernel-${KERNEL_VERSION}.tar.gz" > "${BUILD_DEST}/kernel-${KERNEL_VERSION}.sha256"
mv "${WORKDIR}"/*.deb "${BUILD_DEST}"
